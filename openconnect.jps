_info : 'https://docs.cloudscripting.com/1.6.2/'
version: 1.6.2
build: 20200401
type: update
name: 'OpenConnect'
id: 'openconnect'
homepage: https://github.com/layershift/jps-openconnect
baseUrl: https://raw.githubusercontent.com/layershift/jps-openconnect/master
logo: /images/openconnect.png?_r=${fn.random}

categories:
 - apps/others

description:
  text: /texts/description.md
  short: Oppenconnect SSL VPN client

targetNodes:
  nodeGroup:
  - cp

requiredFeatures: extip

settings:
  main:
    fields:
    - type: string
      name: server
      caption: VPN peer
      hideLabel: false
      required: true
    - type: string
      name: user
      caption: VPN User
      hideLabel: false
      required: true
    - type: string
      name: password
      caption: VPN Password
      required: true
      hideLabel: false
    - type: string
      name: group
      caption: VPN Group
      required: true
      hideLabel: false
    - type: string
      name: grouppassword
      caption: VPN Group Password
      hideLabel: false
    - type: text
      name: hosts
      caption: Custom /etc/hosts
      default: "#127.0.0.1 localhost"

    
menu:
  - caption: Check hosts file
    loadingText: Checking..
    action: checkHostsFile
  - caption: Disable Openconnect
    loadingText: Stopping..
    confirmText: Are you sure you wish to disable Openconnect?
    action: stopOpenconnect
  - caption: Restart Openconnect
    loadingText: Restarting..
    confirmText: Are you sure you wish to restart Openconnect?
    action: restartOpenconnect
  - caption: Configure
    loadingText: Updating..
    settings: main
    confirmText: Are you sure you wish to configure Openconnect?
    action: install
    successText: /text/success_configured.md

buttons:
  - caption: Status
    loadingText: Checking..
    action: checkOpenconnectStatus

globals:
  targetNodeId:  ${nodes.cp.first.id}
  targetNodeType: ${nodes.cp.first.nodeType}
  
onAfterRedeployContainer:
  install:
    name: Install Action

onInstall:
  install:
    name: Install Action

onUninstall:
  cmd [${globals.targetNodeId}]:
    - yum remove openconnect
    - systemctl disable openconnect.service 2>&1 > /dev/null;
    - systemctl stop openconnect.service 2>&1 > /dev/null;
    - sh /root/openconnect_configure.sh "uninstall"
    - rm -f /root/openconnect_configure.sh;
    - rm -f /etc/sudoers.d/openconnect;
    - rm -f /etc/profile.d/openconnect.sh;
    - rm -f /etc/systemd/system/openconnect.service
    - rm -f /usr/local/bin/vpn;
    - rm -rf /etc/vpn-conf
  sayYes: true
  user: root

actions:
  install:
    - cmd [${globals.targetNodeId}]:
      - which rpm 2>/dev/null >/dev/null; if [ $? -gt 0 ]; then echo -e "Issue:\nrpm not found"; exit 0; fi;
      - which systemctl 2>/dev/null >/dev/null; if [ $? -gt 0 ]; then echo -e "Issue:\nsystemctl not found"; exit 0; fi;
      - yum install epel-release && yum install openconnect; if [ $? -gt 0 ]; then echo -e "Issue:\nCan't install openconnect"; exit 0; fi;
      - curl -fsSL '${baseUrl}/scripts/openconnect_configure.sh' -o /root/openconnect_configure.sh;
      - sh /root/openconnect_configure.sh "install" "${baseUrl}" "${settings.server}" "${settings.user}" '${settings.password}' "${settings.group}" '${settings.grouppassword}' "${settings.hosts}" "${globals.targetNodeType}";
      - curl -fsSL '${baseUrl}/scripts/sudo_openconnect' -o /etc/sudoers.d/openconnect;
      - curl -fsSL '${baseUrl}/scripts/profile_openconnect' -o /etc/profile.d/openconnect.sh;
      - curl -fsSL '${baseUrl}/scripts/openconnect.service' -o /etc/systemd/system/openconnect.service;
      - systemctl daemon-reload
      - systemctl enable openconnect.service 2>&1 > /dev/null;
      - systemctl start openconnect.service 2>&1 > /dev/null;
      sayYes: true
      user: root
    - if (response.out.indexOf("Issue") !== -1):
        message:  ${response.out}
        script: |
          return {'result': 2309, 'message': message.replace(/\n/g, '  \n')}

  stopOpenconnect:
    - cmd [${globals.targetNodeId}]:
        - systemctl stop openconnect.service 2>&1 > /dev/null;
        - sleep 3;
        - /usr/local/bin/vpn status;
        - touch /usr/local/bin/vpn_disabled;
        - echo "";
      user: root
    - message: ${response.out}
      script: |
        return {'result': 2307, 'message': message.replace(/\n/g, '  \n')}

  restartOpenconnect:
    - cmd [${globals.targetNodeId}]:
        - rm -f /usr/local/bin/vpn_disabled
        - systemctl restart openconnect.service 2>&1 > /dev/null;
        - sleep 3;
        - systemctl status openconnect.service 2>&1 > /dev/null;
        - if [ $? -gt 0 ]; then systemctl status openconnect.service; else echo "Restart successful!"; fi;
        - echo "";
      user: root
    - message: ${response.out}
      script: |
        return {'result': 2307, 'message': message.replace(/\n/g, '  \n')}

  checkOpenconnectStatus:
    - cmd [${globals.targetNodeId}]:
        - systemctl status openconnect.service;
        - echo "";
      user: root
    - message: ${response.out}
      script: |
        return {'result': 2307, 'message': message.replace(/\n/g, '  \n')}

  checkHostsFile:
    - cmd [${globals.targetNodeId}]:
        - grep -q "#openconnect mark" /etc/hosts 
        - if [ $? -eq 0 ]; then from=$(grep "#openconnect mark" /etc/hosts -m1 -n | awk -F ":" '{print $1}'); else from=1; fi;
        - sed -ne $from,999p /etc/hosts;
      user: root
    - message: ${response.out}
      script: |
        return {'result': 2307, 'message': message.replace(/\n/g, '  \n')}

responses:
  2307:
    type: info
    message: Custom Success message!

  2308:
    type: success
    message: Custom Success message!
  
  2309:
    type: error
    message: Custom Success message!

success: /texts/success.md
